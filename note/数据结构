树的周游算法

先序遍历
给定一棵子树，按照先序遍历的方式，首先访问它的根结点，然后是左子结点，最后是右子结点。由于按照从左到右的方式依次遍历各个子树，因此以相同的方式将左子结点和右子结点当做新的子树的根。
先序遍历是按照深度优先的方式遍历结点的

中序遍历
给定一棵子树，按照中序遍历的方式，首先访问左子结点，然后是根结点，最后是右子结点。由于按照从左到右的方式依次遍历各个子树，因此以相同的方式将左子结点和右子结点当做新的子树的根。

后序遍历
给定一棵子树，按照后序遍历的方式，首先访问左子结点，然后是右子结点，最后是根结点。由于按照从左到右的方式依次遍历各个子树，因此以相同的方式将左子结点和右子结点当做新的子树的根。

层级遍历
要用层级遍历的方式周游一棵树，首先访问树的根，然后依次向下层处理，按照从左到右的顺序访问每层的结点。层级遍历运用了广度优先的策略

树的平衡
树的平衡是指对于给定数量的结点，保证树的高度尽可能短的过程。这意味着在结点加入下一层之前必须保证本层结点满额。
正式的说法是，如果满足树的所有叶子结点都在同一层上，或者所有叶子结点都在最后两层上，且倒数第二层是满的，则这棵树是平衡的。

AVL树（Adel'son-Vel'skii and Landis）
是一种特殊类型的二叉树，它的每个结点都保存一份额外的信息：结点的平衡因子。
结点的平衡因子是它的右子树高度减去它的左子树高度的结果（见图9-9）。当插入结点时，AVL树需要自我调整，使得所有结点的平衡因子保持为+1、-1或0。
当子树的根结点平衡因子为+1时，它是左倾斜的（left-heavy）。当子树的根结点平衡因子为-1时，它是右倾斜的(right-heavy)
一棵子树的根结点的平衡因子就代表该子树的平衡性。保持所有子树几乎都处于平衡状态，AVL树在总体上就能够基本保持平衡

在有向图中，
顶点的入度（in-degree）指的是以该顶点为终点的边的数目。而顶点的出度（out-degree）指的是以该顶点为起点的边的数目。
在无向图中，
边（u,v）与顶点u和v相关联，而顶点的度就是与该顶点相关联的边的数目

在有向图中，如果V0=Vk，且路径包含至少一条边，则该路径组成一个环。在无向图中，有路径＜V0,V1,V2……,Vk＞，如果V0=Vk且从V1到Vk中没有重复的顶点，则该路径组成一个环。
没有环的图称为无环图。有向无环图有特殊的名称，叫做DAG（Directed Acyline Graph的缩写）

连通性是图中另一个重要的概念。对于无向图而言，如果它的每个顶点都能通过某条路径到达其他顶点，那么我们称它为连通的。如果该条件在有向图中同样成立，则称该图是强连通的。
尽管无向图可能不是连通的，但它仍然可能包含连通的部分，这部分称为连通分支。如果有向图中只有部分是强连通的，则该部分称为强连通分支。